#!/usr/bin/env python
#
#  header.py
#
#  Generate a header for the given markdown file.
#

import re
import os
import datetime as dt
import calendar

import click
import arrow


DAILY_HEADER = """# {year} W{week_no} {day}

[[{prev_date}]] | [[{year} W{week_no}]] | [[{next_date}]]

## Agenda

## Tasks
"""

WEEK_HEADER = """# {year} W{week_no}

[[{prev_week}]] | [[{year}]] | [[{next_week}]]

"""


@click.command()
@click.argument("filename")
def header(filename):
    base = os.path.basename(filename)
    name = os.path.splitext(base)[0]

    if is_date(name):
        title = date_header(name)
    elif is_week(name):
        title = week_header(name)
    else:
        title = f"# {name.replace('-', ' ')}"

    print(title)


def date_header(name: str) -> str:
    date = parse_date(name)
    week_no = get_week_no(date)
    day = calendar.day_name[date.weekday()]
    prev_date = date - dt.timedelta(days=1)
    next_date = date + dt.timedelta(days=1)
    return DAILY_HEADER.format(
        year=date.year,
        week_no=week_no,
        day=day,
        prev_date=prev_date,
        next_date=next_date,
    )


def week_header(name: str):
    year = int(name.split("-")[0])
    week_no = int(name.split("W")[1])
    prev_week = f"{year} W{week_no - 1}" if week_no > 1 else f"{year - 1} W52"
    next_week = f"{year} W{week_no + 1}" if week_no < 52 else f"{year + 1} W1"
    return WEEK_HEADER.format(
        week_no=week_no, year=year, prev_week=prev_week, next_week=next_week
    )


def is_date(s: str) -> bool:
    return bool(re.match("[0-9]{4}-[0-9]{2}-[0-9]{2}", s))


def is_week(s: str) -> bool:
    return bool(re.match("[0-9]{4}-W[0-9]{1,2}", s))


def parse_date(s: str) -> dt.date:
    return arrow.get(s).date()


def get_week_no(date: dt.date) -> int:
    return date.isocalendar()[1]


if __name__ == "__main__":
    header()
